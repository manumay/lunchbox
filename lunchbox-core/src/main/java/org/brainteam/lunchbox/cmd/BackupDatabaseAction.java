package org.brainteam.lunchbox.cmd;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.SQLException;import javax.annotation.Resource;import javax.sql.DataSource;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.i18n.Translator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;@Component("backupdatabase")@Scope("prototype")public class BackupDatabaseAction implements Command {		static final String NAME = "action.backupdatabase.name";		@Resource	private DataSource dataSource;		@Autowired	private Translator translator;		@Autowired	private Directories directories;	@Override	public String getName() {		return getTranslator().t(NAME);	}	@Override	public void execute() throws CommandException {		String backupDirectory = getDirectories().getBackupDir().getAbsolutePath();		doBackup(backupDirectory);	}		public void doBackup(String backupDirectory) {		try (Connection conn = getDataSource().getConnection(); CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE(?)")) {			cs.setString(1, backupDirectory);			cs.execute(); 		} catch (SQLException e) {			throw new RuntimeException(e);		}	}		protected DataSource getDataSource() {		return dataSource;	}		protected Translator getTranslator() {		return translator;	}		protected Directories getDirectories() {		return directories;	}}