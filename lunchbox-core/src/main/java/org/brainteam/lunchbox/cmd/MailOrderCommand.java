package org.brainteam.lunchbox.cmd;import java.util.List;import org.brainteam.lunchbox.dao.OfferRepository;import org.brainteam.lunchbox.domain.Offer;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.json.JsonOrdersDaily;import org.brainteam.lunchbox.services.MailService;import org.brainteam.lunchbox.services.ReportService;import org.brainteam.lunchbox.util.DateUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;@Component("mailorder")@Scope("prototype")public class MailOrderCommand implements Command {		static final String NAME = "action.mailorder.name";		@Autowired	private OfferRepository offerRepository;		@Autowired	private ReportService reportService;		@Autowired	private MailService mailService;		@Autowired	private Translator translator;		@Override	public String getName() {		return getTranslator().t(NAME);	}	@Override	public void execute() throws CommandException {		try {			List<Offer> nextOffers = getOfferRepository().findNextOrderByDateAsc(DateUtils.now());			if (!nextOffers.isEmpty()) {				JsonOrdersDaily json = getReportService().getDailyReportJson(nextOffers.get(0));				getMailService().mailOrders(json);			}		} catch (RuntimeException e) {			throw new CommandException(e);		}	}		protected OfferRepository getOfferRepository() {		return offerRepository;	}		protected MailService getMailService() {		return mailService;	}		protected ReportService getReportService() {		return reportService;	}		protected Translator getTranslator() {		return translator;	}}
