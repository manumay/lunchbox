package org.brainteam.lunchbox.dao;import java.util.Date;import java.util.List;import org.brainteam.lunchbox.domain.Order;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;public interface OrderRepository extends JpaRepository<Order, Long> {		@Query("SELECT COUNT(o) FROM Order o JOIN o.orderer u " +			"WHERE u.id=:userId")	Long count(@Param("userId") Long userId);		@Query("SELECT SUM(o.times) FROM Order o")	Long countTimes();		@Query("SELECT SUM(o.times) FROM Order o JOIN o.orderer u " +			"WHERE u.id=:userId")	Long countTimes(@Param("userId") Long userId);		@Query("SELECT SUM(o.times*oi.priceInCents) FROM Order o JOIN o.item oi")	Long sumCosts();		@Query("SELECT SUM(o.times*oi.priceInCents) FROM Order o JOIN o.item oi JOIN o.orderer u " +			"WHERE u.id=:userId")	Long sumCostsForUser(@Param("userId") Long userId);		@Query("SELECT o FROM Order o JOIN o.item oi JOIN oi.offer off " +			"WHERE off.date>=:from AND off.date<=:till")	List<Order> findByFromAndTillOrderByDate(@Param("from") Date from, @Param("till") Date till);		@Query("SELECT o FROM Order o JOIN o.item oi JOIN oi.offer off JOIN o.orderer u " +			"WHERE off.date>=:from AND off.date<=:till AND u.id=:userId")	List<Order> findByFromAndTillAndUserIdOrderByDate(@Param("from") Date from, @Param("till") Date till, @Param("userId") Long userId);		@Query("SELECT ord FROM Order ord " +			"JOIN ord.item oi JOIN oi.offer o " +			"WHERE o.date>=:from AND o.date<=:till AND o.locked=:locked " +			"ORDER BY o.date")	List<Order> findByFromAndTillAndLockedOrderByDate(@Param("from") Date from, @Param("till") Date till, 			@Param("locked") boolean locked);	@Query("SELECT ord FROM Order ord " +			"JOIN ord.item oi JOIN oi.offer o JOIN ord.orderer u " +			"WHERE o.date>=:from AND o.date<=:till AND o.locked=:locked AND u.id=:userId " +			"ORDER BY o.date")	List<Order> findByFromAndTillAndLockedAndUserIdOrderByDate(@Param("from") Date from, @Param("till") Date till, 			@Param("locked") boolean locked, @Param("userId") Long userId);		@Query("SELECT ord FROM Order ord " +			"JOIN ord.item oi JOIN oi.offer o " +			"WHERE o.id=:offerId " +			"ORDER BY o.date")	List<Order> findByOfferId(@Param("offerId") Long offerId);	}