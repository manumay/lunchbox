package org.brainteam.lunchbox.out;import java.util.ArrayList;import java.util.List;import org.apache.commons.lang.StringUtils;import org.apache.commons.mail.Email;import org.apache.commons.mail.EmailAttachment;import org.apache.commons.mail.EmailException;import org.apache.commons.mail.MultiPartEmail;import org.brainteam.lunchbox.domain.User;import org.brainteam.lunchbox.jmx.MailerConfiguration;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;@Componentpublic class MailerImpl implements Mailer {		@Autowired	private MailerConfiguration configuration;	@Override	public void sendTo(MailData mail, String... recipients) throws MailException {		sendTo(mail, recipients, new String[0], new String[0]);	}		@Override	public void sendTo(MailData mail, String[] to, String[] cc, String[] bcc) throws MailException {		try {			Email email = createEmail(mail, to, cc, bcc);			email.send();		} catch (EmailException e) {			throw new MailException(e);		}	}	@Override	public void sendToUsers(MailData mail, User... users) throws MailException {		List<MailException> causes = new ArrayList<>();		for (User user : users) {			try {				sendTo(mail, getRecipientsForUser(user));			} catch (MailException e) {				causes.add(e);			}		}				if (!causes.isEmpty()) {			throw new CollectedMailException(causes);		}	}	private Email createEmail(MailData mail, String[] to, String[] cc, String[] bcc) throws EmailException {		Email email = toEmail(mail);		for (String toRecipient : to) {			email.addTo(toRecipient);		}		for (String ccRecipient : cc) {			email.addCc(ccRecipient);		}		for (String bccRecipient : bcc) {			email.addBcc(bccRecipient);		}		return email;	}	private String[] getRecipientsForUser(User... users) {		List<String> recipients = new ArrayList<>();		for (User user : users) {			String userMailAddresses = user.getMail();			if (!StringUtils.isEmpty(userMailAddresses)) {				String[] userMailAddressesSplit = StringUtils.split(userMailAddresses, ',');				for (String userMailAddress : userMailAddressesSplit) {					userMailAddress = StringUtils.trim(userMailAddress);					if (!StringUtils.isEmpty(userMailAddress)) {						recipients.add(userMailAddress);					}				}			}		}		return recipients.toArray(new String[0]);	}	private Email toEmail(MailData mailData) throws EmailException {		MultiPartEmail email = new MultiPartEmail();		email.setHostName(getConfiguration().getSmtpHostName());		email.setSmtpPort(getConfiguration().getSmtpPort());		email.setAuthentication(getConfiguration().getSmtpUserName(), getConfiguration().getSmtpPassword());		email.setFrom(getConfiguration().getFrom());		email.setSubject(mailData.getSubject());		email.setMsg(mailData.getMessage());		email.setCharset("UTF-8");				for (EmailAttachment attachment : getAttachments(mailData)) {			email.attach(attachment);		}				return email;	}	private List<EmailAttachment> getAttachments(MailData mailData) {		List<EmailAttachment> attachments = new ArrayList<>();		for (MailAttachment mailAttachment : mailData.getAttachments()) {			EmailAttachment attachment = new EmailAttachment();			attachment.setName(mailAttachment.getName());			attachment.setDescription(mailAttachment.getDescription());			attachment.setPath(mailAttachment.getFile().getPath());			attachment.setDisposition(EmailAttachment.ATTACHMENT);			attachments.add(attachment);		}		return attachments;	}		public MailerConfiguration getConfiguration() {		return configuration;	}		public void setConfiguration(MailerConfiguration configuration) {		this.configuration = configuration;	}	}