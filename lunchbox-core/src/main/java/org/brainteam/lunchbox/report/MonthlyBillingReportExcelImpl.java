package org.brainteam.lunchbox.report;import java.io.IOException;import java.io.OutputStream;import java.text.DateFormatSymbols;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashSet;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.poi.hpsf.SummaryInformation;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.hssf.util.CellReference;import org.apache.poi.hssf.util.HSSFColor;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellStyle;import org.apache.poi.ss.usermodel.DataFormat;import org.apache.poi.ss.usermodel.Font;import org.apache.poi.ss.usermodel.IndexedColors;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.ss.util.CellRangeAddress;import org.brainteam.lunchbox.core.LunchboxRuntimeException;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.jmx.InternationalizationConfiguration;import org.brainteam.lunchbox.jmx.MonthlyBillingReportConfiguration;import org.brainteam.lunchbox.jmx.SystemConfiguration;import org.brainteam.lunchbox.json.JsonOrdersBilling;import org.brainteam.lunchbox.json.JsonOrdersDayOfMonth;import org.brainteam.lunchbox.json.JsonOrdersMonthly;import org.brainteam.lunchbox.json.JsonOrdersMonthlyOrderItem;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.util.StringUtils;@Componentpublic class MonthlyBillingReportExcelImpl implements MonthlyBillingReport {		private static final String MESSAGE_QUANTITY = "quantity";	private static final String MESSAGE_SUM = "sum";	private static final String MESSAGE_TOTAL = "total";		@Autowired	private MonthlyBillingReportConfiguration configuration;	@Autowired	private InternationalizationConfiguration i18nConfiguration;		@Autowired	private SystemConfiguration systemConfiguration;		@Autowired	private Translator translator;		@Override	public void write(OutputStream out, List<JsonOrdersBilling> json) {		if (out == null) {			throw new IllegalArgumentException("out must not be null");		}		if (json == null) {			throw new IllegalArgumentException("json must not be null");		}				try {			HSSFWorkbook wb = createWorkbook(json);			wb.write(out);		} catch (IOException e) {			throw new LunchboxRuntimeException(e);		} catch (RuntimeException e) {			e.printStackTrace();		}	}		protected HSSFWorkbook createWorkbook(List<JsonOrdersBilling> json) {		HSSFWorkbook wb = new HSSFWorkbook();		for (JsonOrdersBilling jsonItem : json) {	        createSheet(wb, jsonItem);		}				wb.setActiveSheet(wb.getNumberOfSheets() - 1);                wb.createInformationProperties();        SummaryInformation si = wb.getSummaryInformation();        si.setAuthor(getAuthor());        si.setCreateDateTime(new Date());        si.setTitle(getTitle());        si.setApplicationName(getApplicationName());        return wb;	}		protected String getAuthor() {		return getApplicationName();	}		protected String getTitle() {		return getConfiguration().getTitle();	}		protected String getApplicationName() {		return getTranslator().getApplicationName();	}		protected String getSheetName(JsonOrdersBilling json) {		String month = DateFormatSymbols.getInstance(getI18nConfiguration().getLocale()).getMonths()[json.getMonth().intValue() - 1];		String year = String.valueOf(json.getYear());		System.out.println(month + " " + year);		return month + " " + year;	}		protected Sheet createSheet(Workbook wb, JsonOrdersBilling json) {		if (json.getItems().isEmpty()) {			return null;		}				Sheet sheet = wb.createSheet(getSheetName(json));		sheet.setDefaultRowHeightInPoints(20F);		sheet.createFreezePane(1, 2);				CellStyle headerStyle = sheet.getWorkbook().createCellStyle();		tanFill(headerStyle);		centered(headerStyle);		bordered(headerStyle);		bold(wb, headerStyle);				CellStyle headerCurrencyStyle = sheet.getWorkbook().createCellStyle();		tanFill(headerCurrencyStyle);		centered(headerCurrencyStyle);		bordered(headerCurrencyStyle);		bold(wb, headerCurrencyStyle);		formatCurrency(wb, headerCurrencyStyle);				CellStyle headerNameStyle = sheet.getWorkbook().createCellStyle();		tanFill(headerNameStyle);		centered(headerNameStyle);		bordered(headerNameStyle);		bold(wb, headerNameStyle);				CellStyle contentStyle = sheet.getWorkbook().createCellStyle();		greenFill(contentStyle);		centered(contentStyle);		bordered(contentStyle);				CellStyle contentCurrencyStyle = sheet.getWorkbook().createCellStyle();		greenFill(contentCurrencyStyle);		centered(contentCurrencyStyle);		bordered(contentCurrencyStyle);		formatCurrency(wb, contentCurrencyStyle);				CellStyle totalStyle = sheet.getWorkbook().createCellStyle();		yellowFill(totalStyle);		centered(totalStyle);		doubleBorderedTop(totalStyle);		bold(wb, totalStyle);				CellStyle totalCurrencyStyle = sheet.getWorkbook().createCellStyle();		yellowFill(totalCurrencyStyle);		centered(totalCurrencyStyle);		doubleBorderedTop(totalCurrencyStyle);		formatCurrency(wb, totalCurrencyStyle);		bold(wb, totalCurrencyStyle);				int columnIndex = 0;		int rowIndex = 0;				int headerRow1Index = rowIndex;		Row headerRow1 = sheet.createRow(rowIndex);		Cell cell = headerRow1.createCell(0);		cell.setCellType(Cell.CELL_TYPE_BLANK);		cell.setCellStyle(headerStyle);				rowIndex++;				Row headerRow2 = sheet.createRow(rowIndex);		cell = headerRow2.createCell(0);		cell.setCellType(Cell.CELL_TYPE_BLANK);		cell.setCellStyle(headerStyle);				rowIndex++;				sheet.addMergedRegion(new CellRangeAddress(headerRow1Index, headerRow1Index + 1, columnIndex, columnIndex));				Set<Integer> prices = getDifferentPrices(json);		Map<Integer,Cell> priceCells = new HashMap<>();		columnIndex = 1;		for (Integer price : prices) {			cell = headerRow1.createCell(columnIndex, Cell.CELL_TYPE_NUMERIC);			cell.setCellStyle(headerCurrencyStyle);			cell.setCellValue(price / 100.0);			priceCells.put(price, cell);						cell = headerRow1.createCell(columnIndex + 1, Cell.CELL_TYPE_BLANK);			cell.setCellStyle(headerCurrencyStyle);						sheet.addMergedRegion(new CellRangeAddress(headerRow1Index, headerRow1Index, columnIndex, columnIndex + 1));						cell = headerRow2.createCell(columnIndex);			cell.setCellStyle(headerStyle);			cell.setCellValue(getTranslator().t(MESSAGE_QUANTITY));						cell = headerRow2.createCell(columnIndex + 1);			cell.setCellStyle(headerStyle);			cell.setCellValue(getTranslator().t(MESSAGE_SUM));						columnIndex += 2;		}				cell = headerRow1.createCell(columnIndex);		cell.setCellStyle(headerStyle);		cell.setCellValue(getTranslator().t(MESSAGE_TOTAL));				cell = headerRow2.createCell(columnIndex);		cell.setCellStyle(headerStyle);				sheet.addMergedRegion(new CellRangeAddress(headerRow1Index, headerRow1Index + 1, columnIndex, columnIndex));				List<Cell> userSumCells = new ArrayList<>();		for (JsonOrdersMonthly jsonMonthly : json.getItems()) {			Row userRow = sheet.createRow(rowIndex);			cell = userRow.createCell(0);			cell.setCellStyle(headerNameStyle);			cell.setCellValue(getRowTitle(jsonMonthly));					columnIndex = 1;			List<Cell> sumCells = new ArrayList<>();			Map<Integer,Integer> quantities = getQuantityForPrizes(jsonMonthly);			for (Integer price : prices) {				Integer quantity = quantities.containsKey(price) ? quantities.get(price) : Integer.valueOf(0);				Cell quantityCell = userRow.createCell(columnIndex);				quantityCell.setCellValue(quantity);				quantityCell.setCellStyle(contentStyle);								cell = userRow.createCell(columnIndex + 1);				cell.setCellStyle(contentCurrencyStyle);				sumCells.add(cell);								Cell priceCell = priceCells.get(price);				CellReference priceCellRef = new CellReference(priceCell.getRowIndex(), priceCell.getColumnIndex());				CellReference quantityCellRef = new CellReference(quantityCell.getRowIndex(), quantityCell.getColumnIndex());				cell.setCellFormula(priceCellRef.formatAsString() + "*" + quantityCellRef.formatAsString());								columnIndex += 2;			}						cell = userRow.createCell(columnIndex, Cell.CELL_TYPE_FORMULA);			cell.setCellStyle(contentCurrencyStyle);			cell.setCellFormula(getSumFormula(sumCells));			userSumCells.add(cell);						rowIndex++;		}				Row totalRow = sheet.createRow(rowIndex);				columnIndex = 0;		cell = totalRow.createCell(columnIndex, Cell.CELL_TYPE_STRING);		cell.setCellStyle(totalStyle);		cell.setCellValue(getTranslator().t(MESSAGE_TOTAL));				columnIndex++;				int startColumnIndex = columnIndex;		for (int i = 0; i < prices.size() * 2; i++) {			cell = totalRow.createCell(columnIndex, Cell.CELL_TYPE_BLANK);			cell.setCellStyle(totalStyle);			columnIndex++;		}				if (!prices.isEmpty()) {			sheet.addMergedRegion(new CellRangeAddress(rowIndex, rowIndex, startColumnIndex, columnIndex - 1));		}				cell = totalRow.createCell(columnIndex, Cell.CELL_TYPE_FORMULA);		cell.setCellStyle(totalCurrencyStyle);		cell.setCellFormula(getSumFormula(userSumCells));				for (int i = 0; i < columnIndex; i++) {			sheet.autoSizeColumn(i);		}				return sheet;	}		protected Set<Integer> getDifferentPrices(JsonOrdersBilling json) {		Set<Integer> prices = new LinkedHashSet<>();		for (JsonOrdersMonthly jsonOrdersMonthly : json.getItems()) {			for (JsonOrdersDayOfMonth jsonDayOfMonth : jsonOrdersMonthly.getDays()) {				for (JsonOrdersMonthlyOrderItem jsonOrderItem : jsonDayOfMonth.getItems()) {					prices.add(jsonOrderItem.getOfferItem().getPriceInCents());				}			}		}		return prices;	}		protected Map<Integer,Integer> getQuantityForPrizes(JsonOrdersMonthly json) {		Map<Integer,Integer> quantities = new HashMap<>();		for (JsonOrdersDayOfMonth jsonDayOfMonth : json.getDays()) {			for (JsonOrdersMonthlyOrderItem jsonOrderItem : jsonDayOfMonth.getItems()) {				Integer priceInCents = jsonOrderItem.getOfferItem().getPriceInCents();				if (!quantities.containsKey(priceInCents)) {					quantities.put(priceInCents, 0);				}				quantities.put(priceInCents, quantities.get(priceInCents) + jsonOrderItem.getTimes());			}		}		return quantities;	}		protected String getRowTitle(JsonOrdersMonthly json) {		return json.getUserFullname() + (!StringUtils.isEmpty(json.getPersonnelNumber()) ? " / " + json.getPersonnelNumber() : "");	}		protected String getSumFormula(List<Cell> cells) {		String[] cellRefs = new String[cells.size()];		for (int i = 0; i < cells.size(); i++) {			Cell sumCell = cells.get(i);			CellReference cellRef = new CellReference(sumCell.getRowIndex(), sumCell.getColumnIndex());			cellRefs[i] = cellRef.formatAsString();		}				StringBuilder sumFormula = new StringBuilder("SUM(");		sumFormula.append(StringUtils.arrayToCommaDelimitedString(cellRefs));		sumFormula.append(")");		return sumFormula.toString();	}		protected static void tanFill(CellStyle cellStyle) {		cellStyle.setFillForegroundColor(HSSFColor.TAN.index);		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);	}		protected static void greenFill(CellStyle cellStyle) {		cellStyle.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);	}		protected static void yellowFill(CellStyle cellStyle) {		cellStyle.setFillForegroundColor(HSSFColor.YELLOW.index);		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);	}		protected static void bold(Workbook wb, CellStyle cellStyle) {		cellStyle.setFont(getFont(wb));	}		protected static void centered(CellStyle cellStyle) {		cellStyle.setAlignment(CellStyle.ALIGN_CENTER);		cellStyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);	}		protected static void bordered(CellStyle cellStyle) {		cellStyle.setBorderBottom(CellStyle.BORDER_THIN);		cellStyle.setBorderLeft(CellStyle.BORDER_THIN);		cellStyle.setBorderRight(CellStyle.BORDER_THIN);		cellStyle.setBorderTop(CellStyle.BORDER_THIN);		cellStyle.setBottomBorderColor(HSSFColor.BLACK.index);		cellStyle.setLeftBorderColor(HSSFColor.BLACK.index);		cellStyle.setRightBorderColor(HSSFColor.BLACK.index);		cellStyle.setTopBorderColor(HSSFColor.BLACK.index);	}		protected static void doubleBorderedTop(CellStyle cellStyle) {		cellStyle.setBorderBottom(CellStyle.BORDER_THIN);		cellStyle.setBorderLeft(CellStyle.BORDER_THIN);		cellStyle.setBorderRight(CellStyle.BORDER_THIN);		cellStyle.setBorderTop(CellStyle.BORDER_THICK);		cellStyle.setBottomBorderColor(HSSFColor.BLACK.index);		cellStyle.setLeftBorderColor(HSSFColor.BLACK.index);		cellStyle.setRightBorderColor(HSSFColor.BLACK.index);		cellStyle.setTopBorderColor(HSSFColor.BLACK.index);	}		protected static void doubleBorderedBottom(CellStyle cellStyle) {		cellStyle.setBorderBottom(CellStyle.BORDER_THICK);		cellStyle.setBorderLeft(CellStyle.BORDER_THIN);		cellStyle.setBorderRight(CellStyle.BORDER_THIN);		cellStyle.setBorderTop(CellStyle.BORDER_THIN);		cellStyle.setBottomBorderColor(HSSFColor.BLACK.index);		cellStyle.setLeftBorderColor(HSSFColor.BLACK.index);		cellStyle.setRightBorderColor(HSSFColor.BLACK.index);		cellStyle.setTopBorderColor(HSSFColor.BLACK.index);	}		protected void formatCurrency(Workbook wb, CellStyle celLStyle) {		DataFormat dataFormat = wb.createDataFormat();		celLStyle.setDataFormat(dataFormat.getFormat(getI18nConfiguration().getExcelCurrencyFormat()));	}		protected static Font getFont(Workbook wb) {		Font font = wb.createFont();	    font.setFontHeightInPoints((short)10);	    font.setFontName("Arial");	    font.setColor(IndexedColors.WHITE.getIndex());	    font.setBoldweight(Font.BOLDWEIGHT_BOLD);	    font.setItalic(false);	    font.setColor(HSSFColor.BLACK.index);	    return font;	}		protected MonthlyBillingReportConfiguration getConfiguration() {		return configuration;	}		protected InternationalizationConfiguration getI18nConfiguration() {		return i18nConfiguration;	}		protected SystemConfiguration getSystemConfiguration() {		return systemConfiguration;	}		protected Translator getTranslator() {		return translator;	}}