package org.brainteam.lunchbox.scheduler;import org.brainteam.lunchbox.cmd.Command;import org.brainteam.lunchbox.cmd.CommandException;import org.brainteam.lunchbox.core.AppContext;import org.brainteam.lunchbox.domain.User;import org.brainteam.lunchbox.security.Security;import org.brainteam.lunchbox.services.JournalService;import org.brainteam.lunchbox.services.UserService;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;public abstract class BackgroundActionJob implements Job {		private static final String JOURNAL_BACKGROUNDJOB_START = "journal.backgroundjob.start";	private static final String JOURNAL_BACKGROUNDJOB_SUCCESS = "journal.backgroundjob.success";	private static final String JOURNAL_BACKGROUNDJOB_FAILURE = "journal.backgroundjob.failure";	private final Class<? extends Command> actionClass;	public BackgroundActionJob(Class<? extends Command> actionClass) {		if (actionClass == null) {			throw new IllegalArgumentException("actionClass may not be null");		}		this.actionClass = actionClass;	}	@Override	public void execute(JobExecutionContext ctx) throws JobExecutionException {		updateSecurityContext();		executeAction();	}		protected void updateSecurityContext() {		User user = AppContext.getBean(UserService.class).getSuperUser();		Authentication authentication = AppContext.getBean(Security.class).getSecurityToken(user);		SecurityContextHolder.getContext().setAuthentication(authentication);	}		protected void executeAction() throws JobExecutionException {		Command action = AppContext.getBean(getActionClass());		try {			addStartJournal(action);			action.execute();			addSuccessJournal(action);		} catch (CommandException e) {			addFailureJournal(action, e);			throw new JobExecutionException(e);		}	}		protected void addStartJournal(Command action) {		AppContext.getBean(JournalService.class).add(JOURNAL_BACKGROUNDJOB_START, new String[] { action.getName() } );	}		protected void addSuccessJournal(Command action) {		AppContext.getBean(JournalService.class).add(JOURNAL_BACKGROUNDJOB_SUCCESS, new String[] { action.getName() } );	}		protected void addFailureJournal(Command action, CommandException e) {		AppContext.getBean(JournalService.class).add(JOURNAL_BACKGROUNDJOB_FAILURE, new String[] { action.getName(), getRootCause(e) } );	}		protected String getRootCause(Throwable t) {		while (t.getCause() != null) {			t = t.getCause();		}		return t.getMessage();	}	public Class<? extends Command> getActionClass() {		return actionClass;	}}