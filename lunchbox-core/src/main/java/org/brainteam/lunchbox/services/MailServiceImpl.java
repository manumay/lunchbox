package org.brainteam.lunchbox.services;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.text.DateFormatSymbols;import java.text.SimpleDateFormat;import java.util.Collections;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;import org.apache.commons.lang.StringUtils;import org.brainteam.lunchbox.core.Clock;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.jmx.InternationalizationConfiguration;import org.brainteam.lunchbox.jmx.MailServiceConfiguration;import org.brainteam.lunchbox.json.JsonOrdersBilling;import org.brainteam.lunchbox.json.JsonOrdersDaily;import org.brainteam.lunchbox.out.MailAttachment;import org.brainteam.lunchbox.out.MailData;import org.brainteam.lunchbox.out.MailException;import org.brainteam.lunchbox.out.Mailer;import org.brainteam.lunchbox.report.DailyOrderReport;import org.brainteam.lunchbox.report.MonthlyBillingReport;import org.brainteam.lunchbox.templates.MailBillingTextTemplate;import org.brainteam.lunchbox.templates.MailOrderTextTemplate;import org.brainteam.lunchbox.templates.TextTemplateException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.stereotype.Service;@Servicepublic class MailServiceImpl implements MailService {		@Autowired	private Mailer mailer;		@Autowired	private MailOrderTextTemplate mailOrderTemplate;		@Autowired	private MailBillingTextTemplate mailBillingTemplate;		@Autowired	private MonthlyBillingReport monthlyBillingReport;		@Autowired	private DailyOrderReport dailyOrderReport;		@Autowired	private MailServiceConfiguration configuration;		@Autowired	private InternationalizationConfiguration i18nConfiguration;		@Autowired	private Clock clock;		@Autowired	private Directories directories;		private final SimpleDateFormat dateFormatShort = new SimpleDateFormat("dd.MM.yyyy");	private final SimpleDateFormat dateFormatLong = new SimpleDateFormat("dd. MMMM yyyy");	private final SimpleDateFormat timestampFormat = new SimpleDateFormat("dd. MMMM yyyy, HH:mm:ss 'Uhr'");	@Override	@PreAuthorize("hasRole('admin')")	public void mailBilling(List<JsonOrdersBilling> json) {		if (json == null) {			throw new IllegalArgumentException("json may not be null");		}				Collections.sort(json);		JsonOrdersBilling jsonLastMonth = json.get(json.size() - 1);				MailData mail = new MailData();		mail.setSubject(getSubject(jsonLastMonth));		mail.setMessage(getMessage(jsonLastMonth));				String filename = "Abrechnung." + jsonLastMonth.getMonth() + "-" + jsonLastMonth.getYear() + ".xls";		File tempFile = new File(getDirectories().getTempDir(), filename);		FileOutputStream out = null;		try {			FileUtils.forceDeleteOnExit(tempFile);			out = new FileOutputStream(tempFile);			getMonthlyBillingReport().write(out, json);		} catch (IOException e) {			throw new ServiceException(e);		} finally {			IOUtils.closeQuietly(out);		}		MailAttachment attachment = new MailAttachment();		attachment.setName(filename);		attachment.setDescription("");		attachment.setFile(tempFile);		mail.addToAttachments(attachment);		try {			getMailer().sendTo(mail, getConfiguration().getMailBillingToAsArray(), getConfiguration().getMailBillingCCAsArray(),					getConfiguration().getMailBillingBCCAsArray());		} catch (MailException e) {			throw new ServiceException(e);		}	}		protected String getSubject(JsonOrdersBilling json) {		String subject = getConfiguration().getMailBillingSubject();		Map<String,Object> replacements = createParams(json);		String[] toReplace = replacements.keySet().toArray(new String[0]);		String[] replacement = new String[toReplace.length];		for (int i = 0; i < toReplace.length; i++) {			replacement[i] = String.valueOf(replacements.get(toReplace[i]));		}		subject = StringUtils.replaceEach(subject, new String [] { "$" + MailBillingTextTemplate.NAME_OF_MONTH, "$" + MailBillingTextTemplate.YEAR }, 				new String [] { DateFormatSymbols.getInstance(getI18nConfiguration().getLocale()).getMonths()[json.getMonth().intValue() - 1],					String.valueOf(json.getYear())} );		return subject;	}		protected String getMessage(JsonOrdersBilling json) {		try {			return getMailBillingTemplate().getText(createParams(json));		} catch (TextTemplateException e) {			throw new ServiceException(e);		}	}		private Map<String,Object> createParams(JsonOrdersBilling json) {		Map<String,Object> params = new HashMap<>();		params.put(MailBillingTextTemplate.CREATION_DATE, timestampFormat.format(getClock().now()));		params.put(MailBillingTextTemplate.NAME_OF_MONTH, DateFormatSymbols.getInstance(getI18nConfiguration().getLocale()).getMonths()[json.getMonth().intValue() - 1]);		params.put(MailBillingTextTemplate.YEAR, String.valueOf(json.getYear()));		params.put(MailBillingTextTemplate.BILLING_INFO, getConfiguration().getMailBillingInfo());		return params;	}		@Override	@PreAuthorize("hasRole('admin')")	public void mailOrders(JsonOrdersDaily json) {		if (json == null) {			throw new IllegalArgumentException("json may not be null");		}		if (json.getItems().isEmpty()) {			return;		}		MailData mail = new MailData();		mail.setSubject(getSubject(json));		mail.setMessage(getMessage(json));		String filename = "Bestellung-" + dateFormatShort.format(json.getDate()) + ".pdf";		File tempFile = new File(getDirectories().getTempDir(), filename);		FileOutputStream out = null;		try {			FileUtils.forceDeleteOnExit(tempFile);			out = new FileOutputStream(tempFile);			getDailyOrderReport().write(out, json);		} catch (IOException e) {			throw new ServiceException(e);		} finally {			IOUtils.closeQuietly(out);		}		MailAttachment attachment = new MailAttachment();		attachment.setName(filename);		attachment.setDescription("");		attachment.setFile(tempFile);		mail.addToAttachments(attachment);		try {			getMailer().sendTo(mail, getConfiguration().getMailOrdersToAsArray(), getConfiguration().getMailOrdersCCAsArray(),					getConfiguration().getMailOrdersBCCAsArray());		} catch (MailException e) {			throw new ServiceException(e);		}	}	protected String getSubject(JsonOrdersDaily json) {		String subject = getConfiguration().getMailOrdersSubject();		subject = StringUtils.replaceEach(subject, new String [] { "$" + MailOrderTextTemplate.ORDER_DATE }, 				new String [] { dateFormatLong.format(json.getDate()) } );		return subject;	}	protected String getMessage(JsonOrdersDaily json) {		try {			return getMailOrderTemplate().getText(createParams(json));		} catch (TextTemplateException e) {			throw new ServiceException(e);		}	}		private Map<String,Object> createParams(JsonOrdersDaily json) {		Map<String,Object> params = new HashMap<>();		params.put(MailOrderTextTemplate.CREATION_DATE, timestampFormat.format(getClock().now()));		params.put(MailOrderTextTemplate.ORDER_DATE, dateFormatLong.format(json.getDate()));		params.put(MailOrderTextTemplate.ORDER_INFO, getConfiguration().getMailOrdersInfo());		return params;	}		protected Mailer getMailer() {		return mailer;	}		protected MonthlyBillingReport getMonthlyBillingReport() {		return monthlyBillingReport;	}		protected DailyOrderReport getDailyOrderReport() {		return dailyOrderReport;	}		protected MailOrderTextTemplate getMailOrderTemplate() {		return mailOrderTemplate;	}		protected MailBillingTextTemplate getMailBillingTemplate() {		return mailBillingTemplate;	}		protected MailServiceConfiguration getConfiguration() {		return configuration;	}		protected Clock getClock() {		return clock;	}		protected Directories getDirectories() {		return directories;	}		protected InternationalizationConfiguration getI18nConfiguration() {		return i18nConfiguration;	}}
