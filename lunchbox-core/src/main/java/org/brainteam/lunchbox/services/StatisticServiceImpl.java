package org.brainteam.lunchbox.services;import java.text.DateFormatSymbols;import java.util.ArrayList;import java.util.List;import org.brainteam.lunchbox.dao.MealRepository;import org.brainteam.lunchbox.dao.OfferRepository;import org.brainteam.lunchbox.dao.OrderRepository;import org.brainteam.lunchbox.dao.StatisticsDAO;import org.brainteam.lunchbox.dao.UserRepository;import org.brainteam.lunchbox.domain.User;import org.brainteam.lunchbox.i18n.CurrencyFormatter;import org.brainteam.lunchbox.i18n.CurrencyFormatterImpl;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.json.JsonPieChartData;import org.brainteam.lunchbox.json.JsonStatisticsNamedValueItem;import org.brainteam.lunchbox.json.JsonSystemStatistics;import org.brainteam.lunchbox.json.JsonTopUser;import org.brainteam.lunchbox.json.JsonUserStatistics;import org.brainteam.lunchbox.security.Security;import org.brainteam.lunchbox.util.Pair;import org.brainteam.lunchbox.util.Triplet;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class StatisticServiceImpl implements StatisticService {		private static final String TOTAL_NUMBER_OF_ORDERS =  "statistics.value.numberoforders";	private static final String TOTAL_NUMBER_OF_ORDERED_ITEMS = "statistics.value.numberofordereditems";	private static final String TOTAL_COSTS = "statistics.value.totalcosts";	private static final String TOTAL_NUMBER_OF_MEALS = "statistics.value.numberofmeals";	private static final String TOTAL_NUMBER_OF_OFFERS = "statistics.value.numberofoffers";		private static final String TOTAL_NUMBER_OF_ORDERS_FOR_USER = TOTAL_NUMBER_OF_ORDERS;	private static final String TOTAL_NUMBER_OF_ORDERED_ITEMS_FOR_USER = TOTAL_NUMBER_OF_ORDERED_ITEMS;	private static final String TOTAL_COSTS_FOR_USER = TOTAL_COSTS;//	private static final String AVERAGE_SALES_FOR_USER = "statistics.value.averagesales";		private static final String TROPHY = "statistics.trophy.";	private static final String TROPHY_CHINESE = "chinese";	private static final String TROPHY_FISH = "fish";	private static final String TROPHY_GOURMET = "gourmet";	private static final String TROPHY_GREEDY = "greedy";	private static final String TROPHY_ITALIAN = "italian";	private static final String TROPHY_MAMA = "mama";	private static final String TROPHY_SALAD = "salad";	private static final String TROPHY_SCHNITZEL = "schnitzel";	private static final String TROPHY_SWABIAN = "swabian";	private static final String TROPHY_VEGGIE = "veggie";	private static final String DESCRIPTION = ".description";		@Autowired	private MealRepository mealRepository;		@Autowired	private OfferRepository offerRepository;		@Autowired	private OrderRepository orderRepository;		@Autowired	private UserRepository userRepository;		@Autowired	private StatisticsDAO statisticsDAO;		@Autowired	private Translator translator;		@Autowired	private Security security;		@Autowired	private CurrencyFormatter currencyFormatter;	@Override	@Transactional(readOnly=true)	@PreAuthorize("hasRole('user')")	public JsonUserStatistics getCurrentUserStatistics() {		return getUserStatistics(getSecurity().getCurrentUser());	}		@Override	public JsonUserStatistics getUserStatistics(Long userId) {		User user = getUserRepository().findOne(userId);		return getUserStatistics(user);	}		@Override	@Transactional(readOnly=true)	@PreAuthorize("hasRole('user')")	public JsonSystemStatistics getSystemStatistics() {		JsonSystemStatistics json = new JsonSystemStatistics();		addNamedValues(json);		json.setGreediestUsers(getGreediestUsers());		json.setSalesByMonth(wrapInArray(getSalesByMonth()));		json.setPopularMeals(getPopularMeals());		addTopUsers(json);		json.setMenuDistribution(getMenuDistribution());		return json;	}		@Override	@Transactional(readOnly=true)	@PreAuthorize("hasRole('user')")	public JsonUserStatistics getUserStatistics(User user) {		if (user == null) {			return new JsonUserStatistics();		}				JsonUserStatistics json = new JsonUserStatistics();		json.addToNamedValues(getTotalNumberOfOrders(user));		json.addToNamedValues(getTotalNumberOfOrderedItems(user));		json.addToNamedValues(getTotalCosts(user));//		json.addToNamedValues(getAverageSalesPerMonth(user));		json.setSalesByMonth(wrapInArray(getSalesByMonth(user)));		json.setPopularMeals(getPopularMeals(user));		json.setMenuDistribution(getMenuDistribution(user));		return json;	}		protected void addNamedValues(JsonSystemStatistics json) {		json.addToNamedValues(getTotalNumberOfOrders());		json.addToNamedValues(getTotalNumberOfOrderedItems());		json.addToNamedValues(getTotalCosts());		json.addToNamedValues(getTotalNumberOfMeals());		json.addToNamedValues(getTotalNumberOfOffers());	}		protected JsonStatisticsNamedValueItem getTotalNumberOfOrders() {		Long totalNumberOfOrders = getOrderRepository().count();		return newItem(TOTAL_NUMBER_OF_ORDERS, CurrencyFormatterImpl.toString(totalNumberOfOrders));	}		protected JsonStatisticsNamedValueItem getTotalNumberOfOrderedItems() {		Long totalNumberOfOrderedItems = getOrderRepository().countTimes();		return newItem(TOTAL_NUMBER_OF_ORDERED_ITEMS, CurrencyFormatterImpl.toString(totalNumberOfOrderedItems));	}		protected JsonStatisticsNamedValueItem getTotalCosts() {		Long costs = getOrderRepository().sumCosts();		return newItem(TOTAL_COSTS, getCurrencyFormatter().format(costs));	}		protected JsonStatisticsNamedValueItem getTotalNumberOfMeals() {		Long totalNumberOfMeals = getMealRepository().count();		return newItem(TOTAL_NUMBER_OF_MEALS, CurrencyFormatterImpl.toString(totalNumberOfMeals));	}		protected JsonStatisticsNamedValueItem getTotalNumberOfOffers() {		Long totalNumberOfOffers = getOfferRepository().count();		return newItem(TOTAL_NUMBER_OF_OFFERS, CurrencyFormatterImpl.toString(totalNumberOfOffers));	} 		protected List<JsonStatisticsNamedValueItem> getGreediestUsers() {		List<JsonStatisticsNamedValueItem> userCharts = new ArrayList<>();		List<Pair<String,Long>> userOrderCharts = getStatisticsDAO().getGreediestUsers(10);		for (Pair<String,Long> userOrderChartItem : userOrderCharts) {			JsonStatisticsNamedValueItem json = new JsonStatisticsNamedValueItem();			json.setName(userOrderChartItem.getFirst());			json.setValue(CurrencyFormatterImpl.toString(userOrderChartItem.getSecond()));			userCharts.add(json);		}		return userCharts;	}		protected Object[][] getSalesByMonth() {		return getSalesByMonth(getStatisticsDAO().getSalesByMonth(12));	}		protected List<JsonStatisticsNamedValueItem> getPopularMeals() {		return getPopularMeals(getStatisticsDAO().getPopularMeals(10));	}		protected void addTopUsers(JsonSystemStatistics json) {		addTopUserIfNotNull(json, TROPHY_CHINESE, getStatisticsDAO().getChineseTopUser());		addTopUserIfNotNull(json, TROPHY_FISH, getStatisticsDAO().getFishTopUser());		addTopUserIfNotNull(json, TROPHY_GOURMET, getStatisticsDAO().getGourmetTopUser());		addTopUserIfNotNull(json, TROPHY_GREEDY, getStatisticsDAO().getGreediestUser());		addTopUserIfNotNull(json, TROPHY_ITALIAN, getStatisticsDAO().getItalianTopUser());		addTopUserIfNotNull(json, TROPHY_MAMA, getStatisticsDAO().getMamaTopUser());		addTopUserIfNotNull(json, TROPHY_SALAD, getStatisticsDAO().getSaladTopUser());		addTopUserIfNotNull(json, TROPHY_SCHNITZEL, getStatisticsDAO().getSchnitzelTopUser());		addTopUserIfNotNull(json, TROPHY_SWABIAN, getStatisticsDAO().getSwabianTopUser());		addTopUserIfNotNull(json, TROPHY_VEGGIE, getStatisticsDAO().getVeggieTopUser());	}		protected void addTopUserIfNotNull(JsonSystemStatistics json, String key, Pair<String,Long> topUser) {		if (topUser == null) {			return;		}		json.addToTopUsers(newTopUserItem(key, topUser.getFirst(), topUser.getSecond()));	}		public JsonPieChartData[] getMenuDistribution() {		return getMenuDistribution(getStatisticsDAO().getOrderDistributionByName());	}	protected JsonStatisticsNamedValueItem getTotalNumberOfOrders(User user) {		Long orderCount = getOrderRepository().count(user.getId());		return newItem(TOTAL_NUMBER_OF_ORDERS_FOR_USER, String.valueOf(orderCount));	}		protected JsonStatisticsNamedValueItem getTotalNumberOfOrderedItems(User user) {		Long orderCount = getOrderRepository().countTimes(user.getId());		return newItem(TOTAL_NUMBER_OF_ORDERED_ITEMS_FOR_USER, String.valueOf(orderCount));	}		protected JsonStatisticsNamedValueItem getTotalCosts(User user) {		Long costs = getOrderRepository().sumCostsForUser(user.getId());		return newItem(TOTAL_COSTS_FOR_USER, getCurrencyFormatter().format(costs));	}	//	protected JsonStatisticsNamedValueItem getAverageSalesPerMonth(User user) {//		Long costs = getStatisticsDAO().getAverageSales(user.getId());//		return newItem(AVERAGE_SALES_FOR_USER, StringUtils.formatCurrency(costs));//	}		protected List<JsonStatisticsNamedValueItem> getPopularMeals(User user) {		return getPopularMeals(getStatisticsDAO().getPopularMeals(user.getId(), 10));	}		protected List<JsonStatisticsNamedValueItem> getPopularMeals(List<Pair<String,Long>> popularMeals) {		List<JsonStatisticsNamedValueItem> jsonList = new ArrayList<>();		for (Pair<String,Long> popularMeal : popularMeals) {			JsonStatisticsNamedValueItem json = new JsonStatisticsNamedValueItem();			json.setName(popularMeal.getFirst());			json.setValue(String.valueOf(popularMeal.getSecond()));			jsonList.add(json);		}		return jsonList;	}		protected JsonPieChartData[] getMenuDistribution(User user) {		return getMenuDistribution(getStatisticsDAO().getOrderDistributionByName(user.getId()));	}		protected JsonPieChartData[] getMenuDistribution(List<Pair<String,Long>> distribsByName) {		JsonPieChartData[] data = new JsonPieChartData[distribsByName.size()];		for (int i = 0; i < distribsByName.size(); i++) {			Pair<String,Long> distribByName = distribsByName.get(i);			JsonPieChartData json = new JsonPieChartData();			json.setLabel(distribByName.getFirst());			json.setData(distribByName.getSecond());			data[i] = json;		}		return data;	}		protected Object[][] getSalesByMonth(User user) {		return getSalesByMonth(getStatisticsDAO().getSalesByMonth(user.getId(), 12));	}		protected Object[][] getSalesByMonth(List<Triplet<Integer,Integer,Long>> salesByMonth) {		Object[][] data = new Object[salesByMonth.size()][2];		for (int i = 0; i < salesByMonth.size(); i++) {			Triplet<Integer,Integer,Long> sales = salesByMonth.get(i);			data[i][0] = new DateFormatSymbols().getMonths()[sales.getSecond() - 1];			data[i][1] = sales.getThird();		}		return data;	}		protected JsonStatisticsNamedValueItem newItem(String key, String value) {		JsonStatisticsNamedValueItem json = new JsonStatisticsNamedValueItem();		json.setName(getTranslator().t(key));		json.setValue(value);		return json;	}		protected JsonTopUser newTopUserItem(String tag, String userName, long times) {		JsonTopUser json = new JsonTopUser();		json.setTag(tag);		json.setName(getTranslator().t(TROPHY + tag));		json.setDescription(getTranslator().t(TROPHY + tag + DESCRIPTION));		json.setTimes(times);		json.setUserName(userName);		return json;	}		protected static Object[] wrapInArray(Object o) {		return new Object[] { o };	}		protected MealRepository getMealRepository() {		return mealRepository;	}		protected OfferRepository getOfferRepository() {		return offerRepository;	}		protected OrderRepository getOrderRepository() {		return orderRepository;	}		protected UserRepository getUserRepository() {		return userRepository;	}		protected StatisticsDAO getStatisticsDAO() {		return statisticsDAO;	}		protected Translator getTranslator() {		return translator;	}		protected Security getSecurity() {		return security;	}		protected CurrencyFormatter getCurrencyFormatter() {		return currencyFormatter;	}	}
