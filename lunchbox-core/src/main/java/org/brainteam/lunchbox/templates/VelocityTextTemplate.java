package org.brainteam.lunchbox.templates;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.StringWriter;import java.net.URL;import java.util.Map;import java.util.Map.Entry;import java.util.Properties;import org.apache.commons.io.IOUtils;import org.apache.velocity.Template;import org.apache.velocity.VelocityContext;import org.apache.velocity.app.VelocityEngine;import org.apache.velocity.runtime.RuntimeConstants;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.util.FileUtils;import org.brainteam.lunchbox.util.LogUtils;import org.springframework.beans.factory.annotation.Autowired;public abstract class VelocityTextTemplate implements TextTemplate {		@Autowired	private Directories directories;		private String fileName;		public VelocityTextTemplate() {	}	@Override	public String getText(Map<String, Object> params) throws TextTemplateException {		checkParams(params);		checkTemplate();		Properties initProps = new Properties();		initProps.setProperty("file.resource.loader.path", getDirectories().getTemplatesDir().getAbsolutePath());		initProps.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS, "org.apache.velocity.runtime.log.Log4JLogChute");		initProps.setProperty("runtime.log.logsystem.log4j.logger", LogUtils.ROOT_LOGGERNAME);		VelocityEngine ve = new VelocityEngine();		ve.init(initProps);		Template template = ve.getTemplate(getFileName(), "UTF-8");		StringWriter sw = new StringWriter();		VelocityContext context = toVelocityContext(params);		template.merge(context, sw);		return sw.toString();	}	protected VelocityContext toVelocityContext(Map<String, Object> params) {		VelocityContext ctx = new VelocityContext();		for (Entry<String,Object> entry : params.entrySet()) {			ctx.put(entry.getKey(), entry.getValue());		}		return ctx;	}	protected void checkParams(Map<String,Object> params) throws TextTemplateException {	}		protected void checkParam(Map<String,Object> params, String key) throws TextTemplateException {		if (!params.containsKey(key)) {			throw new TextTemplateException("missing key " + key);		}	}	protected void checkTemplate() throws TextTemplateException {		if (getFileName() == null) {			throw new TextTemplateException("missing filename");		}				File templateFile = new File(getDirectories().getTemplatesDir(), getFileName());		if (templateFile.exists()) {			return;		}		String expectedTemplateResource = "/templates/" + templateFile.getName();		URL resourceURL = VelocityTextTemplate.class.getResource(expectedTemplateResource);		if (resourceURL == null) {			FileUtils.createEmptyFile(templateFile);		} else {			extractTemplate(resourceURL, templateFile);		}	}	protected void extractTemplate(URL templateUrl, File extractedFile) throws TextTemplateException {		InputStream in = null;		FileOutputStream out = null;		try {			in = templateUrl.openStream();			out = new FileOutputStream(extractedFile); 			int chunk = 0; 			while (true) { 				chunk = in.read();				if (chunk == -1) { 					break; 				}				out.write(chunk);			} 		} catch (IOException e) {			throw new TextTemplateException(e);		} finally {			IOUtils.closeQuietly(in);			IOUtils.closeQuietly(out);		}	}		public String getFileName() {		return fileName;	}		protected void setFileName(String fileName) {		this.fileName = fileName;	}		protected Directories getDirectories() {		return directories;	}}