package org.brainteam.lunchbox.cmd;import static org.mockito.Matchers.any;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertNotNull;import java.net.MalformedURLException;import java.net.URL;import java.sql.SQLException;import org.brainteam.lunchbox.cmd.CommandException;import org.brainteam.lunchbox.cmd.ImportMenuCommand;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.jmx.ImportMenuConfiguration;import org.brainteam.lunchbox.services.OfferService;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class ImportMenuCommandTest {	private static final String TRANSLATED = "translated";	private static final URL TEST_URL;	static {		try {			TEST_URL = new URL("http://www.test.de");		} catch (MalformedURLException e) {			throw new RuntimeException(e);		}	}		@Mock	private Translator translator;		@Mock	private ImportMenuConfiguration configuration;		@Mock	private OfferService offerService;	@InjectMocks	private ImportMenuCommand command = new ImportMenuCommand();		@BeforeClass	public void setup() throws SQLException {		MockitoAnnotations.initMocks(this);		when(translator.t(any(String.class))).thenReturn(TRANSLATED);		when(configuration.getURL()).thenReturn(TEST_URL);	}		@Test	public void testGetName() {		String name = command.getName();		assertNotNull(name);		assertEquals(name, TRANSLATED);		verify(translator).t(ImportMenuCommand.NAME);	}		@Test	public void testExecute() throws CommandException {		command.execute();		verify(configuration).getURL();		verify(offerService).importURL(TEST_URL);	}	}