package org.brainteam.lunchbox.cmd;import static org.mockito.Matchers.any;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertNotNull;import java.sql.SQLException;import java.util.Date;import java.util.List;import org.brainteam.lunchbox.cmd.CommandException;import org.brainteam.lunchbox.cmd.MailOrderCommand;import org.brainteam.lunchbox.dao.OfferRepository;import org.brainteam.lunchbox.domain.Offer;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.json.JsonOrdersDaily;import org.brainteam.lunchbox.services.MailService;import org.brainteam.lunchbox.services.ReportService;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class MailOrderCommandTest {		private static final String TRANSLATED = "translated";		@Mock	private List<Offer> offers;		@Mock	private Offer offer;		@Mock	private JsonOrdersDaily json;		@Mock	private Translator translator;	@Mock	private OfferRepository offerRepository;		@Mock	private ReportService reportService;		@Mock	private MailService mailService;		@InjectMocks	private MailOrderCommand command = new MailOrderCommand();		@BeforeClass	public void setup() throws SQLException {		MockitoAnnotations.initMocks(this);		when(translator.t(any(String.class))).thenReturn(TRANSLATED);		when(offerRepository.findNextOrderByDateAsc(any(Date.class))).thenReturn(offers);		when(offers.get(0)).thenReturn(offer);		when(reportService.getDailyReportJson(offer)).thenReturn(json);	}		@Test	public void testGetName() {		String name = command.getName();		assertNotNull(name);		assertEquals(name, TRANSLATED);		verify(translator).t(MailOrderCommand.NAME);	}		@Test	public void testExecute() throws CommandException {		command.execute();		verify(offerRepository).findNextOrderByDateAsc(any(Date.class));		verify(reportService).getDailyReportJson(offer);		verify(mailService).mailOrders(json);	}}