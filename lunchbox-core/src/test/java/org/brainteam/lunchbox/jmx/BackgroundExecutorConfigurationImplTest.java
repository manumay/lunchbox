package org.brainteam.lunchbox.jmx;import org.mockito.InjectMocks;import org.testng.annotations.Test;@Test(groups= { "jmx", "unit", "broken" })public class BackgroundExecutorConfigurationImplTest extends BaseConfigurationTest {		private static final String CRON = "cron";		@InjectMocks	private final BackgroundExecutorConfigurationImpl config = new BackgroundExecutorConfigurationImpl();		@Test	public void testGetAndSetCronImportMenu() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return BackgroundExecutorConfigurationImpl.CRON_IMPORTMENU_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return BackgroundExecutorConfigurationImpl.CRON_IMPORTMENU_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return CRON;			}			@Override			protected Object getCurrentValue() {				return config.getCronScheduleImportMenu();			}			@Override			protected void setValue(Object value) {				config.setCronScheduleImportMenu((String)value);			}					});	}		@Test	public void testGetAndSetCronLockOffers() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return BackgroundExecutorConfigurationImpl.CRON_LOCKOFFERS_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return BackgroundExecutorConfigurationImpl.CRON_LOCKOFFERS_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return CRON;			}			@Override			protected Object getCurrentValue() {				return config.getCronScheduleLockOffers();			}			@Override			protected void setValue(Object value) {				config.setCronScheduleLockOffers((String)value);			}					});	}		@Test	public void testGetAndSetCronMailBilling() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return BackgroundExecutorConfigurationImpl.CRON_MAILBILLING_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return BackgroundExecutorConfigurationImpl.CRON_MAILBILLING_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return CRON;			}			@Override			protected Object getCurrentValue() {				return config.getCronScheduleMailBilling();			}			@Override			protected void setValue(Object value) {				config.setCronScheduleMailBilling((String)value);			}					});	}		@Test	public void testGetAndSetCronMailOrders() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return BackgroundExecutorConfigurationImpl.CRON_MAILORDER_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return BackgroundExecutorConfigurationImpl.CRON_MAILORDER_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return CRON;			}			@Override			protected Object getCurrentValue() {				return config.getCronScheduleMailOrder();			}			@Override			protected void setValue(Object value) {				config.setCronScheduleMailOrder((String)value);			}					});	}		@Override	protected String getFilename() {		return BackgroundExecutorConfigurationImpl.CONFIGURATION_FILENAME;	}}