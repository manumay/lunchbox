package org.brainteam.lunchbox.jmx;import static org.testng.Assert.assertEquals;import org.apache.commons.lang.StringUtils;import org.mockito.InjectMocks;import org.testng.annotations.Test;@Test(groups= { "jmx", "unit", "broken" })public class FischerPdfParserConfigurationImplTest extends BaseConfigurationTest {	private static final Integer DEFAULT_PRICE = Integer.valueOf(99);	private static final String MENUTYPE = "menutype";	private static final String SKIP = ",skip1,skip2";	@InjectMocks	private final FischerPdfParserConfigurationImpl config = new FischerPdfParserConfigurationImpl();	@Override	protected String getFilename() {		return FischerPdfParserConfigurationImpl.CONFIGURATION_FILENAME;	}	@Test	public void testGetAndSetDefaultPrice() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.DEFAULTPRICE_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.DEFAULTPRICE_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return DEFAULT_PRICE;			}			@Override			protected Object getCurrentValue() {				return config.getDefaultPrice();			}			@Override			protected void setValue(Object value) {				config.setDefaultPrice((Integer)value);			}		});	}	@Test	public void testGetAndSetMenu1Type() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.MENU1TYPE_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.MENU1TYPE_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return MENUTYPE;			}			@Override			protected Object getCurrentValue() {				return config.getMenu1Type();			}			@Override			protected void setValue(Object value) {				config.setMenu1Type((String)value);			}		});	}	@Test	public void testGetAndSetMenu2Type() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.MENU2TYPE_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.MENU2TYPE_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return MENUTYPE;			}			@Override			protected Object getCurrentValue() {				return config.getMenu2Type();			}			@Override			protected void setValue(Object value) {				config.setMenu2Type((String)value);			}		});	}	@Test	public void testGetAndSetMenu3Type() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.MENU3TYPE_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.MENU3TYPE_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return MENUTYPE;			}			@Override			protected Object getCurrentValue() {				return config.getMenu3Type();			}			@Override			protected void setValue(Object value) {				config.setMenu3Type((String)value);			}		});	}		@Test	public void testGetAndSetSaladType() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.SALADTYPE_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.SALADTYPE_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return MENUTYPE;			}			@Override			protected Object getCurrentValue() {				return config.getSaladType();			}			@Override			protected void setValue(Object value) {				config.setSaladType((String)value);			}					});	}		@Test	public void testGetAndSetSkipType() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return FischerPdfParserConfigurationImpl.SKIP_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return FischerPdfParserConfigurationImpl.SKIP_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return SKIP;			}			@Override			protected Object getCurrentValue() {				return config.getSkipValue();			}			@Override			protected void setValue(Object value) {				config.setSkipValue((String)value);			}						@Override			void checkValue(Object expectedValue) {				super.checkValue(expectedValue);				String[] asArray = StringUtils.split((String)expectedValue, ',');				assertEquals(config.getSkip(), asArray);			}					});	}}