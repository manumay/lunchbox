package org.brainteam.lunchbox.jmx;import static org.testng.Assert.assertEquals;import java.util.Locale;import org.mockito.InjectMocks;import org.testng.annotations.Test;@Test(groups= { "jmx", "unit", "broken" })public class InternationalizationConfigurationImplTest extends BaseConfigurationTest {	private static final String FORMAT = "0##â‚¬";	private static final String LANGUAGETAG = Locale.CHINA.getLanguage();	@InjectMocks	private final InternationalizationConfigurationImpl config = new InternationalizationConfigurationImpl();	@Override	protected String getFilename() {		return InternationalizationConfigurationImpl.CONFIGURATION_FILENAME;	}	@Test	public void testGetAndSetExcelCurrencyFormat() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return InternationalizationConfigurationImpl.EXCELCURRENCYFORMAT_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return InternationalizationConfigurationImpl.EXCELCURRENCYFORMAT_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return FORMAT;			}			@Override			protected Object getCurrentValue() {				return config.getExcelCurrencyFormat();			}			@Override			protected void setValue(Object value) {				config.setExcelCurrencyFormat((String) value);			}		});	}	@Test	public void testGetAndSetLocale() {		testGetAndSet(new TestCase() {			@Override			protected String getPropertyName() {				return InternationalizationConfigurationImpl.LANGUAGETAG_PROPERTY;			}			@Override			protected Object getDefaultValue() {				return InternationalizationConfigurationImpl.LANGUAGETAG_DEFAULT;			}			@Override			protected Object getUpdateValue() {				return LANGUAGETAG;			}			@Override			protected Object getCurrentValue() {				return config.getLanguageTag();			}			@Override			protected void setValue(Object value) {				config.setLanguageTag((String)value);			}			@Override			void checkValue(Object expectedValue) {				super.checkValue(expectedValue);				assertEquals(config.getLocale(), Locale.forLanguageTag((String)expectedValue));			}		});	}}