package org.brainteam.lunchbox.report;import static org.mockito.Matchers.any;import static org.mockito.Mockito.when;import static org.testng.Assert.assertTrue;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.Locale;import org.apache.commons.io.FileUtils;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.jmx.InternationalizationConfiguration;import org.brainteam.lunchbox.jmx.InternationalizationConfigurationImpl;import org.brainteam.lunchbox.jmx.MonthlyBillingReportConfiguration;import org.brainteam.lunchbox.jmx.SystemConfiguration;import org.brainteam.lunchbox.json.JsonOfferItemInfo;import org.brainteam.lunchbox.json.JsonOrdersBilling;import org.brainteam.lunchbox.json.JsonOrdersDayOfMonth;import org.brainteam.lunchbox.json.JsonOrdersMonthly;import org.brainteam.lunchbox.json.JsonOrdersMonthlyOrderItem;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class MonthlyBillingReportExcelImplTest {		private static final String APPLICATION_NAME = "App";	private static final String COMPANY_NAME = "Ich AG";	private static final String TITLE = "Working Title";	private static final Integer PRICE_HIGH = Integer.valueOf(495);	private static final Integer PRICE_LOW = Integer.valueOf(395);	private static final Integer TIMES1 = Integer.valueOf(1);	private static final Integer TIMES2 = Integer.valueOf(2);	private static final String USERNAME1 = "Sylvie van der Vaart";	private static final String USERNAME2 = "Adriana Lima";	private static final String PERSONNELNUMBER = "A123";	private static final String TRANSLATED = "translated";		private Integer month = Integer.valueOf(1);	private Integer year = Integer.valueOf(2013);	@Mock	private JsonOrdersBilling json;		@Mock	private JsonOrdersMonthly jsonMonthly1, jsonMonthly2;		@Mock	private JsonOrdersDayOfMonth jsonDayOfMonth1, jsonDayOfMonth2, jsonDayOfMonth3;		@Mock	private JsonOrdersMonthlyOrderItem jsonItem1, jsonItem2, jsonItem3;		@Mock	private JsonOfferItemInfo jsonOfferItem1, jsonOfferItem2, jsonOfferItem3;		@Mock	private InternationalizationConfiguration i18nConfiguration;		@Mock	private MonthlyBillingReportConfiguration configuration;		@Mock	private SystemConfiguration systemConfiguration;		@Mock	private Translator translator;		@InjectMocks	private MonthlyBillingReportExcelImpl report = new MonthlyBillingReportExcelImpl();		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(json.getMonth()).thenReturn(month);		when(json.getYear()).thenReturn(year);		when(json.getItems()).thenReturn(Arrays.asList(jsonMonthly1, jsonMonthly2));		when(jsonMonthly1.getDays()).thenReturn(Arrays.asList(jsonDayOfMonth1, jsonDayOfMonth2));		when(jsonMonthly1.getPersonnelNumber()).thenReturn(PERSONNELNUMBER);		when(jsonMonthly1.getUserFullname()).thenReturn(USERNAME1);		when(jsonMonthly2.getDays()).thenReturn(Arrays.asList(jsonDayOfMonth3));		when(jsonMonthly2.getUserFullname()).thenReturn(USERNAME2);		when(jsonDayOfMonth1.getItems()).thenReturn(Arrays.asList(jsonItem1, jsonItem2));		when(jsonDayOfMonth2.getItems()).thenReturn(Arrays.asList(jsonItem3));		when(jsonDayOfMonth3.getItems()).thenReturn(new ArrayList<JsonOrdersMonthlyOrderItem>());		when(jsonItem1.getOfferItem()).thenReturn(jsonOfferItem1);		when(jsonItem1.getTimes()).thenReturn(TIMES1);		when(jsonItem2.getOfferItem()).thenReturn(jsonOfferItem2);		when(jsonItem2.getTimes()).thenReturn(TIMES2);		when(jsonItem3.getOfferItem()).thenReturn(jsonOfferItem3);		when(jsonItem3.getTimes()).thenReturn(TIMES1);		when(jsonOfferItem1.getPriceInCents()).thenReturn(PRICE_HIGH);		when(jsonOfferItem2.getPriceInCents()).thenReturn(PRICE_LOW);		when(jsonOfferItem3.getPriceInCents()).thenReturn(PRICE_LOW);		when(translator.getApplicationName()).thenReturn(APPLICATION_NAME);		when(translator.t(any(String.class))).thenReturn(TRANSLATED);		when(i18nConfiguration.getLocale()).thenReturn(Locale.GERMANY);		when(i18nConfiguration.getExcelCurrencyFormat()).thenReturn(InternationalizationConfigurationImpl.EXCELCURRENCYFORMAT_DEFAULT);		when(systemConfiguration.getCompanyName()).thenReturn(COMPANY_NAME);		when(configuration.getTitle()).thenReturn(TITLE);	}		@Test(expectedExceptions=IllegalArgumentException.class)	public void testOutputStreamNull() {		report.write(null, Arrays.asList(json));	}		@Test(expectedExceptions=IllegalArgumentException.class)	public void testJsonNull() {		report.write(new ByteArrayOutputStream(), null);	}		@Test	public void testWrite() throws FileNotFoundException, IOException {		File tempFile = File.createTempFile("billing", ".xls");		FileUtils.forceDeleteOnExit(tempFile);		FileOutputStream out = new FileOutputStream(tempFile);		report.write(out, Arrays.asList(json));		assertTrue(tempFile.exists());		assertTrue(tempFile.length() > 0);	}}