package org.brainteam.lunchbox.scheduler;import static org.mockito.Mockito.any;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertFalse;import static org.testng.Assert.assertNotNull;import static org.testng.Assert.assertNull;import static org.testng.Assert.assertTrue;import java.util.List;import org.brainteam.lunchbox.i18n.Translator;import org.brainteam.lunchbox.jmx.BackgroundExecutorConfiguration;import org.brainteam.lunchbox.json.JsonSchedulerJob;import org.brainteam.lunchbox.util.DateUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.quartz.SchedulerException;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups="unit")public class BackgroundExecutorImplTest {		private static final String CRON = "0 0 0 * * ?";	private static final String TRANSLATED = "translated";	@Mock	private Translator translator;		@Mock	private BackgroundExecutorConfiguration configuration;		@InjectMocks	private BackgroundExecutorImpl backgroundExecutor = new BackgroundExecutorImpl();		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(configuration.getCronScheduleImportMenu()).thenReturn(CRON);		when(configuration.getCronScheduleLockOffers()).thenReturn(CRON);		when(configuration.getCronScheduleMailOrder()).thenReturn(CRON);		when(configuration.getCronScheduleMailBilling()).thenReturn(CRON);		when(translator.t(any(String.class))).thenReturn(TRANSLATED);	}		@BeforeMethod	public void resetMock() {		backgroundExecutor.stop();	}		@Test	public void testLifecycle() throws SchedulerException {		assertFalse(backgroundExecutor.isStarted());		backgroundExecutor.start();		assertTrue(backgroundExecutor.isStarted());		backgroundExecutor.start();		assertTrue(backgroundExecutor.isStarted());		backgroundExecutor.stop();		assertFalse(backgroundExecutor.isStarted());		backgroundExecutor.stop();		assertFalse(backgroundExecutor.isStarted());	}		@Test	public void testGetJobInfo() {		backgroundExecutor.start();		List<JsonSchedulerJob> json = backgroundExecutor.getJobInfo();		assertNotNull(json);		assertEquals(json.size(), 4);				JsonSchedulerJob jsonJob = json.get(0);		assertNotNull(jsonJob);		assertEquals(jsonJob.getDescription(), TRANSLATED);		assertEquals(jsonJob.getGroup(), BackgroundExecutorImpl.GROUP_WORKFLOW);		assertEquals(jsonJob.getKey(), BackgroundExecutorImpl.IMPORTMENU_NAME);		assertNull(jsonJob.getLastExecution());		assertEquals(jsonJob.getName(), TRANSLATED);		assertEquals(jsonJob.getNextExecution(), DateUtils.tomorrowMidnight());	}	}