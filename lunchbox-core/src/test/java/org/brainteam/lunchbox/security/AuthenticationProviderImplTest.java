package org.brainteam.lunchbox.security;import static org.mockito.Mockito.when;import static org.testng.Assert.assertFalse;import static org.testng.Assert.assertSame;import static org.testng.Assert.assertTrue;import org.brainteam.lunchbox.domain.User;import org.brainteam.lunchbox.services.UserService;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.security.authentication.TestingAuthenticationToken;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class AuthenticationProviderImplTest {		private static final String CREDENTIALS = "password";	private static final String USERNAME1 = "ubolt";	private static final String USERNAME2 = "clewis";		@Mock	private User user;		@Mock	private UsernamePasswordAuthenticationToken authTokenUnknown, authToken, created;		@Mock	private UserService userService;		@Mock	private Security security;	@InjectMocks	private AuthenticationProviderImpl authProvider = new AuthenticationProviderImpl();		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);			when(authTokenUnknown.getCredentials()).thenReturn(CREDENTIALS);		when(authTokenUnknown.getPrincipal()).thenReturn(USERNAME1);				when(authToken.getCredentials()).thenReturn(CREDENTIALS);		when(authToken.getPrincipal()).thenReturn(USERNAME2);				when(userService.authenticate(USERNAME1, CREDENTIALS)).thenReturn(null);		when(userService.authenticate(USERNAME2, CREDENTIALS)).thenReturn(user);				when(security.getSecurityToken(user)).thenReturn(created);	}		@Test	public void testSupports() {		assertFalse(authProvider.supports(TestingAuthenticationToken.class));		assertTrue(authProvider.supports(UsernamePasswordAuthenticationToken.class));	}		@Test(expectedExceptions=UsernameNotFoundException.class)	public void testAuthenticateUnknowUser() {		authProvider.authenticate(authTokenUnknown);	}		@Test	public void testAuthenticate() {		assertSame(authProvider.authenticate(authToken), created);	}}