package org.brainteam.lunchbox.security;import static org.mockito.Mockito.reset;import static org.mockito.Mockito.when;import org.brainteam.lunchbox.domain.Offer;import org.brainteam.lunchbox.domain.OfferItem;import org.brainteam.lunchbox.domain.Order;import org.brainteam.lunchbox.domain.User;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups="unit")public class OrderSecurityImplTest {		@Mock	private User owner, otherUser;		@Mock	private Offer offer, offerLocked;		@Mock	private OfferItem offerItem, offerItemLocked;		@Mock	private Order order, orderLocked;		@Mock	private Security security;		@InjectMocks	private OrderSecurityImpl orderSecurity = new OrderSecurityImpl();		@BeforeMethod	public void setup() {		MockitoAnnotations.initMocks(this);				reset(security);				when(offer.isLocked()).thenReturn(false);		when(offerLocked.isLocked()).thenReturn(true);		when(offerItem.getOffer()).thenReturn(offer);		when(offerItemLocked.getOffer()).thenReturn(offerLocked);		when(order.getItem()).thenReturn(offerItem);		when(order.getOrderer()).thenReturn(owner);		when(orderLocked.getItem()).thenReturn(offerItemLocked);	}		@Test(expectedExceptions=SecurityException.class)	public void testLockedOfferUser() {		setAdmin(false);		orderSecurity.checkPermission(null, orderLocked);	}		@Test(expectedExceptions=SecurityException.class)	public void testNotOwnerUser() {		setAdmin(false);		setCurrentUser(otherUser);		orderSecurity.checkPermission(null, order);	}		@Test	public void testNotOwnerAdmin() {		setAdmin(true);		setCurrentUser(otherUser);		orderSecurity.checkPermission(null, order);	}		@Test	public void testOwnerUser() {		setAdmin(false);		setCurrentUser(owner);		orderSecurity.checkPermission(null, order);	}		@Test	public void testLockedOfferAdmin() {		setAdmin(true);		orderSecurity.checkPermission(null, order);	}		protected void setCurrentUser(User user) {		when(security.getCurrentUser()).thenReturn(user);	}		protected void setAdmin(boolean admin) {		when(security.isCurrentUserAdmin()).thenReturn(admin);	}}