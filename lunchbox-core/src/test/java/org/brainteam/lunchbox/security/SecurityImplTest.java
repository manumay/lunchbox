package org.brainteam.lunchbox.security;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertFalse;import static org.testng.Assert.assertNotNull;import static org.testng.Assert.assertNull;import static org.testng.Assert.assertSame;import static org.testng.Assert.assertTrue;import static org.testng.Assert.fail;import java.util.ArrayList;import java.util.Arrays;import java.util.Collection;import java.util.List;import org.brainteam.lunchbox.domain.User;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups="unit")public class SecurityImplTest {		@Mock	private SecurityContext securityContext;	@Mock	private UsernamePasswordAuthenticationToken auth;		@Mock	private User admin, orderer, both, none;		private SecurityImpl security = new SecurityImpl();		@BeforeMethod	public void resetMocks() {		MockitoAnnotations.initMocks(this);				when(admin.getAdminRole()).thenReturn(Boolean.TRUE);		when(admin.getOrdererRole()).thenReturn(Boolean.FALSE);				when(orderer.getAdminRole()).thenReturn(Boolean.FALSE);		when(orderer.getOrdererRole()).thenReturn(Boolean.TRUE);				when(both.getAdminRole()).thenReturn(Boolean.TRUE);		when(both.getOrdererRole()).thenReturn(Boolean.TRUE);				when(none.getAdminRole()).thenReturn(Boolean.FALSE);		when(none.getOrdererRole()).thenReturn(Boolean.FALSE);				SecurityContextHolder.setContext(securityContext);		when(securityContext.getAuthentication()).thenReturn(auth);		when(auth.getPrincipal()).thenReturn(null);	}		@Test	public void testGetCurrentUser() {		assertNull(security.getCurrentUser());		setUser(admin);		User currentUser = security.getCurrentUser();		assertSame(currentUser, admin);	}		@Test	public void testIsLoggedIn() {		assertFalse(security.isLoggedIn());		setUser(admin);		assertTrue(security.isLoggedIn());	}		@Test	public void testIsCurrentUserAdmin() {		assertFalse(security.isCurrentUserAdmin());		setUser(admin);		assertTrue(security.isCurrentUserAdmin());		setUser(orderer);		assertFalse(security.isCurrentUserAdmin());		setUser(both);		assertTrue(security.isCurrentUserAdmin());		setUser(none);		assertFalse(security.isCurrentUserAdmin());	}		@Test	public void testIsCurrentUserNotAdmin() {		assertTrue(security.isCurrentUserNotAdmin());		setUser(admin);		assertFalse(security.isCurrentUserNotAdmin());		setUser(orderer);		assertTrue(security.isCurrentUserNotAdmin());		setUser(both);		assertFalse(security.isCurrentUserNotAdmin());		setUser(none);		assertTrue(security.isCurrentUserNotAdmin());	}		@Test	public void testIsCurrentUserOrderer() {		assertFalse(security.isCurrentUserOrderer());		setUser(admin);		assertFalse(security.isCurrentUserOrderer());		setUser(orderer);		assertTrue(security.isCurrentUserOrderer());		setUser(both);		assertTrue(security.isCurrentUserOrderer());		setUser(none);		assertFalse(security.isCurrentUserOrderer());	}		@Test	public void testIsCurrentUserNotOrderer() {		assertTrue(security.isCurrentUserNotOrderer());		setUser(admin);		assertTrue(security.isCurrentUserNotOrderer());		setUser(orderer);		assertFalse(security.isCurrentUserNotOrderer());		setUser(both);		assertFalse(security.isCurrentUserNotOrderer());		setUser(none);		assertTrue(security.isCurrentUserNotOrderer());	}		@Test	public void testGetSecurityTokenAdmin() {		Authentication auth = security.getSecurityToken(admin);		assertNotNull(auth);		assertTrue(auth instanceof UsernamePasswordAuthenticationToken);		assertSame(auth.getPrincipal(), admin);				@SuppressWarnings("unchecked")		Collection<GrantedAuthority> authorities = (Collection<GrantedAuthority>) auth.getAuthorities();				assertEquals(authorities.size(), 2);		assertGrantedAuthories(authorities, Security.ROLE_USER, Security.ADMIN);	}		@Test	public void testGetSecurityTokenOrderer() {		Authentication auth = security.getSecurityToken(orderer);		assertNotNull(auth);		assertTrue(auth instanceof UsernamePasswordAuthenticationToken);		assertSame(auth.getPrincipal(), orderer);				@SuppressWarnings("unchecked")		Collection<GrantedAuthority> authorities = (Collection<GrantedAuthority>) auth.getAuthorities();				assertEquals(authorities.size(), 2);		assertGrantedAuthories(authorities, Security.ROLE_USER, Security.ORDERER);	}		@Test	public void testGetSecurityTokenBoth() {		Authentication auth = security.getSecurityToken(both);		assertNotNull(auth);		assertTrue(auth instanceof UsernamePasswordAuthenticationToken);		assertSame(auth.getPrincipal(), both);				@SuppressWarnings("unchecked")		Collection<GrantedAuthority> authorities = (Collection<GrantedAuthority>) auth.getAuthorities();				assertEquals(authorities.size(), 3);		assertGrantedAuthories(authorities, Security.ROLE_USER, Security.ADMIN, Security.ORDERER);	}		@Test	public void testGetSecurityTokenNone() {		Authentication auth = security.getSecurityToken(none);		assertNotNull(auth);		assertTrue(auth instanceof UsernamePasswordAuthenticationToken);		assertSame(auth.getPrincipal(), none);				@SuppressWarnings("unchecked")		Collection<GrantedAuthority> authorities = (Collection<GrantedAuthority>) auth.getAuthorities();				assertEquals(authorities.size(), 1);		assertGrantedAuthories(authorities, Security.ROLE_USER);	}		protected static void assertGrantedAuthories(Collection<GrantedAuthority> authorities, String ... expected) {		List<String> removeList = new ArrayList<>(Arrays.asList(expected));		for (GrantedAuthority authority : authorities) {			if (!removeList.remove(authority.getAuthority())) {				fail("undesired authority " + authority.getAuthority());			}		}		if (!removeList.isEmpty()) {			fail("missing authorities: " + removeList);		}	}		protected void setUser(User user) {		when(auth.getPrincipal()).thenReturn(user);	}	}