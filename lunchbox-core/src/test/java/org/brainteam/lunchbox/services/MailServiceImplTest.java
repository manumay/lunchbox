package org.brainteam.lunchbox.services;import static org.mockito.Matchers.any;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyZeroInteractions;import static org.mockito.Mockito.when;import static org.testng.Assert.assertFalse;import static org.testng.Assert.assertNotNull;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.apache.commons.io.FileUtils;import org.brainteam.lunchbox.core.Clock;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.jmx.MailServiceConfiguration;import org.brainteam.lunchbox.json.JsonOrdersDaily;import org.brainteam.lunchbox.json.JsonOrdersDailyOfferItem;import org.brainteam.lunchbox.out.MailData;import org.brainteam.lunchbox.out.MailException;import org.brainteam.lunchbox.out.Mailer;import org.brainteam.lunchbox.report.DailyOrderReport;import org.brainteam.lunchbox.templates.MailOrderTextTemplate;import org.mockito.ArgumentCaptor;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.mockito.Spy;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups={"unit"})public class MailServiceImplTest {	@Mock	private ReportService reportService;		@Mock	private MailOrderTextTemplate mailOrderTemplate;		@Mock	private DailyOrderReport dailyOrderReport;		@Mock	private Mailer mailer;		@Mock	private MailServiceConfiguration configuration;		@Mock	private Clock clock;		@Mock	private JsonOrdersDaily dailyOrdersEmpty;		@Mock	private JsonOrdersDaily dailyOrders;		@Spy	private List<JsonOrdersDailyOfferItem> dailyOfferItems = new ArrayList<>();		@Mock	private JsonOrdersDailyOfferItem dailyOfferItem;		@Mock	private Directories directories;		@InjectMocks	private MailServiceImpl mailService = new MailServiceImpl();		@BeforeClass    public void init() {		MockitoAnnotations.initMocks(this);		dailyOfferItems.add(dailyOfferItem);		dailyOfferItems.add(dailyOfferItem);		when(clock.now()).thenReturn(new Date());		when(dailyOrders.getDate()).thenReturn(new Date());		when(dailyOrders.getItems()).thenReturn(dailyOfferItems);		when(directories.getTempDir()).thenReturn(FileUtils.getTempDirectory());    }		@Test(expectedExceptions=IllegalArgumentException.class)	public void testNull() {		mailService.mailOrders(null);	}		@Test	public void testNoItems() {		mailService.mailOrders(dailyOrdersEmpty);		verifyZeroInteractions(mailer);	}		@Test	public void testWithItems() throws MailException {		mailService.mailOrders(dailyOrders);				ArgumentCaptor<MailData> captor = ArgumentCaptor.forClass(MailData.class); 		verify(mailer).sendTo(captor.capture(), any(String[].class), any(String[].class), any(String[].class));				MailData mailData = captor.getValue(); 		assertNotNull(mailData);		assertFalse(mailData.getAttachments().isEmpty());	}}