package org.brainteam.lunchbox.services;import static org.mockito.Matchers.any;import static org.mockito.Mockito.never;import static org.mockito.Mockito.reset;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertNotNull;import org.brainteam.lunchbox.dao.MealRepository;import org.brainteam.lunchbox.dao.OfferItemRepository;import org.brainteam.lunchbox.domain.Meal;import org.brainteam.lunchbox.in.MealDefinition;import org.brainteam.lunchbox.json.JsonMeal;import org.mockito.ArgumentCaptor;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups={"unit"})public class MealServiceImplTest {	private static final Long ID = Long.valueOf(1);	private static final String DESCRIPTION = "description";	private static final String HEADLINE = "headline";	private static final String INGREDIENTS = "ingredients";	private static final Long OFFERITEMCOUNT = Long.valueOf(0);		@Mock	private JournalService journalService;		@Mock	private OfferItemRepository offerItemRepository;		@Mock	private MealRepository mealRepository;	@Mock	private JsonMeal jsonMealToCreate;		@Mock	private JsonMeal jsonMealToUpdate;		@Mock	private Meal mealWithId;		@Mock	private MealDefinition mealDefinition;		@InjectMocks	private MealServiceImpl mealService = new MealServiceImpl();		@BeforeClass    public void init() {		MockitoAnnotations.initMocks(this);    }		@BeforeMethod	public void resetMocks() {		reset(mealRepository, offerItemRepository, journalService);		when(jsonMealToCreate.getDescription()).thenReturn(DESCRIPTION);		when(jsonMealToCreate.getHeadline()).thenReturn(HEADLINE);		when(jsonMealToCreate.getIngredients()).thenReturn(INGREDIENTS);		when(mealWithId.getId()).thenReturn(ID);		when(mealWithId.getDescription()).thenReturn(DESCRIPTION);		when(mealWithId.getHeadline()).thenReturn(HEADLINE);		when(mealWithId.getIngredients()).thenReturn(INGREDIENTS);		when(jsonMealToUpdate.getId()).thenReturn(ID);		when(jsonMealToUpdate.getDescription()).thenReturn(DESCRIPTION);		when(jsonMealToUpdate.getHeadline()).thenReturn(HEADLINE);		when(jsonMealToUpdate.getIngredients()).thenReturn(INGREDIENTS);		when(mealRepository.save(any(Meal.class))).thenReturn(mealWithId);		when(mealRepository.findOne(ID)).thenReturn(mealWithId);		when(offerItemRepository.findOfferItemCount(any(Long.class))).thenReturn(OFFERITEMCOUNT);	}		@Test(expectedExceptions=IllegalArgumentException.class)	public void testCreateNewWithNull() {		mealService.createNew((JsonMeal)null);	}		@Test(expectedExceptions=IllegalArgumentException.class)	public void testUpdateExistingWithNull() {		mealService.updateExisting((JsonMeal)null);	}		@Test	public void testDeleteExistingWithNull() {		mealService.deleteExisting(null); // nothing should happen		verify(mealRepository, never()).delete(any(Long.class));	}		@Test	public void testCreateNew() {		mealService.createNew(jsonMealToCreate);		ArgumentCaptor<Meal> captor = ArgumentCaptor.forClass(Meal.class);		verify(mealRepository).save(captor.capture());		assertEquals(jsonMealToCreate.getDescription(), captor.getValue().getDescription());		assertEquals(jsonMealToCreate.getHeadline(), captor.getValue().getHeadline());		assertEquals(jsonMealToCreate.getIngredients(), captor.getValue().getIngredients());		verify(journalService).add(any(String.class), any(String[].class));	}		@Test	public void testUpdateExisting() {		mealService.updateExisting(jsonMealToUpdate);		ArgumentCaptor<Meal> captor = ArgumentCaptor.forClass(Meal.class);		verify(mealRepository).save(captor.capture());		assertEquals(jsonMealToUpdate.getDescription(), captor.getValue().getDescription());		assertEquals(jsonMealToUpdate.getHeadline(), captor.getValue().getHeadline());		assertEquals(jsonMealToUpdate.getIngredients(), captor.getValue().getIngredients());		verify(journalService).add(any(String.class), any(String[].class));	}		@Test	public void testDeleteExisting() {		mealService.deleteExisting(ID);		verify(mealRepository).findOne(ID);		verify(mealRepository).delete(mealWithId);		verify(journalService).add(any(String.class), any(String[].class));	}		@Test	public void testImportDefinition() {		mealService.importDefinition(mealDefinition);		verify(mealRepository).save(any(Meal.class));		verify(journalService).add(any(String.class), any(String[].class));	}		@Test	public void testToJson() {		JsonMeal json = mealService.toJson(mealWithId);		verify(offerItemRepository).findOfferItemCount(ID);		assertNotNull(json);		assertEquals(mealWithId.getHeadline(), json.getHeadline());		assertEquals(mealWithId.getDescription(), json.getDescription());		assertEquals(mealWithId.getIngredients(), json.getIngredients());		assertEquals(OFFERITEMCOUNT, json.getOfferItemsCount());	}}