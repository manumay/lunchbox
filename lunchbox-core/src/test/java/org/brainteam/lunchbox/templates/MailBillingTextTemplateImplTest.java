package org.brainteam.lunchbox.templates;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertNotNull;import static org.testng.Assert.assertNull;import java.util.HashMap;import java.util.Map;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.jmx.MailBillingTextTemplateConfiguration;import org.brainteam.lunchbox.test.TestUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class MailBillingTextTemplateImplTest {	private static final String FILENAME = "template.tpl";	private static final String EXPECTED_TEXT = "creationDate,nameOfMonth,year,billingInfo";		@Mock	private Directories directories;		@Mock	private MailBillingTextTemplateConfiguration configuration;		@InjectMocks	private MailBillingTextTemplateImpl templateUnitialized = new MailBillingTextTemplateImpl();		@InjectMocks	private MailBillingTextTemplateImpl template = new MailBillingTextTemplateImpl();		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(directories.getTemplatesDir()).thenReturn(TestUtils.getTestFolder(MailBillingTextTemplateImplTest.class));		when(configuration.getFileName()).thenReturn(FILENAME);	}		@Test	public void testConfigure() {		assertNull(template.getFileName());		template.configure();		assertNotNull(template.getFileName());	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextUninitialized() throws TextTemplateException {		templateUnitialized.getText(getParams());	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingCreationDate() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailBillingTextTemplate.CREATION_DATE);		template.getText(params);	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingNameOfMonth() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailBillingTextTemplate.NAME_OF_MONTH);		template.getText(params);	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingYear() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailBillingTextTemplate.YEAR);		template.getText(params);	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingBillingInfo() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailBillingTextTemplate.BILLING_INFO);		template.getText(params);	}		@Test(dependsOnMethods="testConfigure")	public void testGetText() throws TextTemplateException {		String text = template.getText(getParams());		assertEquals(text, EXPECTED_TEXT);	}		protected Map<String,Object> getParams() {		Map<String,Object> params = new HashMap<>();		params.put(MailBillingTextTemplate.CREATION_DATE, "creationDate");		params.put(MailBillingTextTemplate.NAME_OF_MONTH, "nameOfMonth");		params.put(MailBillingTextTemplate.YEAR, "year");		params.put(MailBillingTextTemplate.BILLING_INFO, "billingInfo");		return params;	}	}