package org.brainteam.lunchbox.templates;import static org.mockito.Mockito.when;import static org.testng.Assert.assertEquals;import static org.testng.Assert.assertNotNull;import static org.testng.Assert.assertNull;import java.util.HashMap;import java.util.Map;import org.brainteam.lunchbox.core.Directories;import org.brainteam.lunchbox.jmx.MailOrderTextTemplateConfiguration;import org.brainteam.lunchbox.test.TestUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups="unit")public class MailOrderTextTemplateImplTest {	private static final String FILENAME = "template.tpl";	private static final String EXPECTED_TEXT = "creationDate,orderDate,orderInfo";		@Mock	private Directories directories;		@Mock	private MailOrderTextTemplateConfiguration configuration;		@InjectMocks	private MailOrderTextTemplateImpl templateUnitialized = new MailOrderTextTemplateImpl();		@InjectMocks	private MailOrderTextTemplateImpl template = new MailOrderTextTemplateImpl();		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(directories.getTemplatesDir()).thenReturn(TestUtils.getTestFolder(MailOrderTextTemplateImplTest.class));		when(configuration.getFileName()).thenReturn(FILENAME);	}		@Test	public void testConfigure() {		assertNull(template.getFileName());		template.configure();		assertNotNull(template.getFileName());	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextUninitialized() throws TextTemplateException {		templateUnitialized.getText(getParams());	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingCreationDate() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailOrderTextTemplate.CREATION_DATE);		template.getText(params);	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingOrderDate() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailOrderTextTemplate.ORDER_DATE);		template.getText(params);	}		@Test(expectedExceptions=TextTemplateException.class)	public void testGetTextMissingOrderInfo() throws TextTemplateException {		Map<String,Object> params = getParams();		params.remove(MailOrderTextTemplate.ORDER_INFO);		template.getText(params);	}		@Test(dependsOnMethods="testConfigure")	public void testGetText() throws TextTemplateException {		String text = template.getText(getParams());		assertEquals(text, EXPECTED_TEXT);	}		protected Map<String,Object> getParams() {		Map<String,Object> params = new HashMap<>();		params.put(MailOrderTextTemplate.CREATION_DATE, "creationDate");		params.put(MailOrderTextTemplate.ORDER_DATE, "orderDate");		params.put(MailOrderTextTemplate.ORDER_INFO, "orderInfo");		return params;	}	}