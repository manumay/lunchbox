package org.brainteam.lunchbox.mvc;import static org.mockito.Mockito.doThrow;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import org.brainteam.lunchbox.cmd.Command;import org.brainteam.lunchbox.cmd.CommandException;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.context.ApplicationContext;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups={"unit"})public class JobControllerTest {	private static final String EXISTING = "existing";	private static final String FAILING = "failing";	private static final String NOT_EXISTING = "notExisting";		@Mock	private Command action, failingAction;		@Mock	private ApplicationContext applicationContext;		@InjectMocks	private ActionController jobController;		@BeforeMethod	public void setup() throws CommandException {		MockitoAnnotations.initMocks(this);				doThrow(new CommandException(new RuntimeException())).when(failingAction).execute();				when(applicationContext.getBean(EXISTING)).thenReturn(action);		when(applicationContext.getBean(FAILING)).thenReturn(failingAction);		when(applicationContext.getBean(NOT_EXISTING)).thenReturn(null);	}		@Test	public void testExistingName() throws CommandException {		jobController.triggerJob(EXISTING);		verify(applicationContext).getBean(EXISTING);		verify(action).execute();	}		@Test(expectedExceptions=RuntimeException.class)	public void testFailing() {		jobController.triggerJob(FAILING);	}		@Test	public void testNotExistingName() throws CommandException {		jobController.triggerJob(NOT_EXISTING);		verify(applicationContext).getBean(NOT_EXISTING);	}	}