package org.brainteam.lunchbox.mvc;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertSame;import java.util.Date;import org.brainteam.lunchbox.json.JsonJournal;import org.brainteam.lunchbox.json.JsonPage;import org.brainteam.lunchbox.services.JournalService;import org.brainteam.lunchbox.util.DateUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups={"unit"})public class JournalResourceTest {		private static final Integer YEAR = Integer.valueOf(2000);	private static final Integer MONTH = Integer.valueOf(12);	private static final Integer DAY = Integer.valueOf(24);	private static final Date DATE = DateUtils.getDay(DAY, MONTH, YEAR);	private static final int PAGE = 1;	private static final int SIZE = 1;	private static final String SORT = "sort";	private static final String ORDER = "order";		@Mock	private JsonPage<JsonJournal> json;		@Mock	private JournalService journalService;	@InjectMocks	private JournalResource journalResource;		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(journalService.getJson(PAGE-1, SIZE, SORT, ORDER, DATE)).thenReturn(json);	}		@Test	public void testGet() {		JsonPage<JsonJournal> result = journalResource.getForDay(YEAR, MONTH, DAY, PAGE, SIZE, SORT, ORDER);		verify(journalService).getJson(PAGE-1, SIZE, SORT, ORDER, DATE);		assertSame(result, json);	}	}