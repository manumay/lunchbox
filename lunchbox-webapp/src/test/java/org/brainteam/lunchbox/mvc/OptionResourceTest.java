package org.brainteam.lunchbox.mvc;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertSame;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.brainteam.lunchbox.json.JsonOption;import org.brainteam.lunchbox.services.OptionService;import org.brainteam.lunchbox.util.DateUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups={"unit"})public class OptionResourceTest {		private static final Integer YEAR = Integer.valueOf(2000);	private static final Integer MONTH = Integer.valueOf(12);	private static final Integer DAY = Integer.valueOf(24);	private static final Date DATE = DateUtils.getDay(DAY, MONTH, YEAR);		private List<JsonOption> json = new ArrayList<>();	@Mock	private OptionService optionService;		@InjectMocks	private OptionResource optionResource;		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(optionService.getMeals()).thenReturn(json);		when(optionService.getOfferItems(DATE)).thenReturn(json);		when(optionService.getUsers()).thenReturn(json);	}		@Test	public void testGetMeals() {		List<JsonOption> result = optionResource.getMeals();		verify(optionService).getMeals();		assertSame(result, json);	}		@Test	public void testGetOfferItems() {		List<JsonOption> result = optionResource.getOffer(YEAR, MONTH, DAY);		verify(optionService).getOfferItems(DATE);		assertSame(result, json);	}		@Test	public void testGetUsers() {		List<JsonOption> result = optionResource.getUsers();		verify(optionService).getUsers();		assertSame(result, json);	}	}