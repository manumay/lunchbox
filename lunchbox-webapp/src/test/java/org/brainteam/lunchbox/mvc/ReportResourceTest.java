package org.brainteam.lunchbox.mvc;import static org.mockito.Matchers.eq;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertSame;import java.io.IOException;import java.util.Arrays;import java.util.Date;import javax.servlet.ServletOutputStream;import javax.servlet.WriteListener;import javax.servlet.http.HttpServletResponse;import org.brainteam.lunchbox.json.JsonOrdersBilling;import org.brainteam.lunchbox.json.JsonOrdersDaily;import org.brainteam.lunchbox.json.JsonOrdersMonthly;import org.brainteam.lunchbox.report.DailyOrderReport;import org.brainteam.lunchbox.report.MonthlyBillingReport;import org.brainteam.lunchbox.services.ReportService;import org.brainteam.lunchbox.util.DateUtils;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;@Test(groups={"unit"})public class ReportResourceTest {		private static final Integer YEAR = Integer.valueOf(2000);	private static final Integer MONTH = Integer.valueOf(12);	private static final Integer DAY = Integer.valueOf(24);	private static final Date DATE = DateUtils.getDay(DAY, MONTH, YEAR);	private ServletOutputStream out = new ServletOutputStream() {				@Override		public void write(int b) throws IOException {		}				@Override		public boolean isReady() {			return false;		}		@Override		public void setWriteListener(WriteListener writeListener) {		}	};		@Mock	private JsonOrdersDaily jsonDaily;		@Mock	private JsonOrdersMonthly jsonMonthly;		@Mock	private JsonOrdersBilling jsonBilling;		@Mock	private HttpServletResponse resp;		@Mock	private MonthlyBillingReport monthlyBillingReport;		@Mock	private DailyOrderReport dailyOrderReport;		@Mock	private ReportService reportService;		@InjectMocks	private ReportResource reportResource;		@BeforeMethod	public void setup() throws IOException {		MockitoAnnotations.initMocks(this);		when(reportService.getDailyReportJson(DATE)).thenReturn(jsonDaily);		when(reportService.getMonthlyReportJson(MONTH, YEAR)).thenReturn(jsonMonthly);		when(reportService.getBillingReportJson(eq(MONTH), eq(YEAR))).thenReturn(jsonBilling);		when(resp.getOutputStream()).thenReturn(out);	}		@Test	public void testGetDailyReport() {		JsonOrdersDaily result = reportResource.getDailyReport(YEAR, MONTH, DAY);		verify(reportService).getDailyReportJson(DATE);		assertSame(result, jsonDaily);	}		@Test	public void testGetDailyReportBinary() throws IOException {		reportResource.getDailyReportBinary(YEAR, MONTH, DAY, resp);		verify(reportService).getDailyReportJson(DATE);		verify(dailyOrderReport).write(out, jsonDaily);	}		@Test	public void testGetMonthlyReport() {		JsonOrdersMonthly result = reportResource.getMonthlyReport(YEAR, MONTH);		verify(reportService).getMonthlyReportJson(MONTH, YEAR);		assertSame(result, jsonMonthly);	}		@Test	public void testGetBillingReport() {		JsonOrdersBilling result = reportResource.getBillingReport(YEAR, MONTH);		verify(reportService).getBillingReportJson(MONTH, YEAR);		assertSame(result, jsonBilling);	}		@Test	public void testGetBillingReportBinary() throws IOException {		reportResource.getBillingReportBinary(YEAR, MONTH, resp);		verify(reportService).getBillingReportJson(MONTH, YEAR);		verify(monthlyBillingReport).write(out, Arrays.asList(jsonBilling));	}	}