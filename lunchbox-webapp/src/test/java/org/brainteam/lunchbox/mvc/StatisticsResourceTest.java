package org.brainteam.lunchbox.mvc;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.testng.Assert.assertSame;import org.brainteam.lunchbox.json.JsonSystemStatistics;import org.brainteam.lunchbox.json.JsonUserStatistics;import org.brainteam.lunchbox.services.StatisticService;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;@Test(groups={"unit"})public class StatisticsResourceTest {		private static final Long ID = Long.valueOf(1);		@Mock	private JsonUserStatistics jsonCurrentUser,jsonUser;		@Mock	private JsonSystemStatistics jsonSystem;	@Mock	private StatisticService statisticService;		@InjectMocks	private StatisticsResource statisticsResource;		@BeforeClass	public void setup() {		MockitoAnnotations.initMocks(this);		when(statisticService.getCurrentUserStatistics()).thenReturn(jsonCurrentUser);		when(statisticService.getUserStatistics(ID)).thenReturn(jsonUser);		when(statisticService.getSystemStatistics()).thenReturn(jsonSystem);	}		@Test	public void testGetCurrentUserStatistics() {		JsonUserStatistics result = statisticsResource.getCurrentUserStatistics();		verify(statisticService).getCurrentUserStatistics();		assertSame(result, jsonCurrentUser);	}		@Test	public void testGetUserStatistics() {		JsonUserStatistics result = statisticsResource.getUserStatistics(ID);		verify(statisticService).getUserStatistics(ID);		assertSame(result, jsonUser);	}		@Test	public void testGetSystemStatistics() {		JsonSystemStatistics result = statisticsResource.getSystemStatistics();		verify(statisticService).getSystemStatistics();		assertSame(result, jsonSystem);	}	}